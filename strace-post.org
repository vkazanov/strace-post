* TODO Аннотация

  - UNIX programming is always somewhat low-level

  - mention Michael's course

* TODO Содержание
* TODO История

  - https://strace.io/

  - tracing syscalls in original UNIX-like systems?

  - strace and truss

  - strace and debuggers

  - read the memoirs!

  - links to sources

  - Unix v6 had a first mention of ptrace (http://man.cat-v.org/unix-6th/2/ptrace)

    debuggers only? any other tools using it in v6?

  - The Design of the Unix Operating System (1986) already contains ptrace (with an example)

    https://github.com/suvratapte/Maurice-Bach-Notes/blob/00943a692099e2c1d69c0b5ef77b05cdf1340c8c/11-Interprocess-Communication.md

    covers System V Release 2 (1984 release)

  - strace in Linux

  - ptrace syscall history

  - ptrace introduction to Linux

  - wikipedia: many relevant historical links

  - wikipedia: advanced features such as fault injection

  - similar tools on other systems (truss in SysV rel.4)

    https://www.freebsd.org/cgi/man.cgi?query=truss (a rewrite)

    http://uw714doc.sco.com/en/man/html.1/truss.1.html

    https://en.wikipedia.org/wiki/Truss_(Unix)

  - there are also some historical comments in the strace(1) manual page

* TODO Использование strace

  - add terminal session gifs! accompany with code to make it easy to copy. Or just links to the
    github repo. (ttyrec then seq2gif < ttyrecord > ttyrecord.gif)

  - basic things:

    - run with strace

    - attach

    - multithreaded apps

    - -P monitor file-related activity

    - -k show syscall stack traces (when compiled with debug symbols)

    - -w syscall latency

    - -v unabbreviated versions of lengthy things

  - advanced things

    - fault injection

    - delay injection

    - success injection

  - man examples

  - TLPI examples

  - additional flags controlling the output

  - ptrace

  - ps shows a traced flag as in SysV? i think it's T

  - ptrace is on per-thread basis, there's no generic process, just an initial thread, multiple threads
    or multiple processes each containing multiple threads.

  - why is there no strace as a library? could be very useful for testing

    https://github.com/strace/strace/issues/70

    also, it's possible to use libseccomp

* TODO the secret sauce: ptrace

  - find implementation

  - read about interrupts

  - INT 3 op replaces an intruction, with an interrupt handler

* TODO using ptrace

  - https://nullprogram.com/blog/2018/06/23/ - example

  - https://github.com/suvratapte/Maurice-Bach-Notes/blob/00943a692099e2c1d69c0b5ef77b05cdf1340c8c/11-Interprocess-Communication.md

  - https://www.linuxjournal.com/article/6100

  - https://ops.tips/gists/using-c-to-inspect-linux-syscalls/

  - http://www.tldp.org/LDP/LG/issue81/sandeep.html

  - https://www.exploit-db.com/papers/13061

  - http://www.alexonlinux.com/how-debugger-works - CPU-level details

  - https://en.wikipedia.org/wiki/Ptrace

  - https://blog.packagecloud.io/eng/2016/02/29/how-does-strace-work/

  - trace a child

  - attach to an existing process

  - ptrace in SysV docs??

  - ptrace in unix v6 http://man.cat-v.org/unix-6th/2/ptrace

  - ministrace (https://github.com/nelhage/ministrace/blob/master/ministrace.c)

  - SIGTRAP=5 - Trace/breakpoint trap (https://en.wikipedia.org/wiki/Signal_(IPC)#SIGTRAP)

  - how does kernel do it?

  - ptrace syscall

  - ptrace for debuggers

  - ptrace for sandboxes (proot, etc)

* TODO Послесловаие

  - other tracing tools in Linux and interfaces: ltrace, ftrace, perf, BPF...

  - first line of debugging, especially when there's no source code available
